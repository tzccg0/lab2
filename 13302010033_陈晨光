# 高级web lab2文档(REST架构的学习和实践)

## 简介

### &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REST（英文：Representational State Transfer，简称REST）描述了一个架构样式的网络系统，比如 web 应用程序。它首次出现在 2000 年 Roy Fielding 的博士论文中，他是 HTTP 规范的主要编写者之一。在目前主流的三种Web服务交互方案中，REST相比于SOAP（Simple Object Access protocol，简单对象访问协议）以及XML-RPC更加简单明了，无论是对URL的处理还是对Payload的编码，REST都倾向于用更加简单轻量的方法设计和实现。值得注意的是REST并没有一个明确的标准，而更像是一种设计的风格。REST只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。  
###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在REST架构提出来后，之后，JavaSE/EE执行委员批准了JSR 311 JAX-RS作为支持RESTful web服务的java 应用程序接口。JAX-RS (Java平台上的REST支持规范 - aka JSR-311) 成为第一个到达提议为最终草案阶段的JavaEE 6的规范。

###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在，对JAX-RS的实现主要有4个：CXF，Jersey，RESTEasy及Restlet，在这次lab中，我选择使用Jersey来搭建REST架构。
  
    
    
##环境搭建
###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先，使用eclipse作为开发环境，然后再搭建eclipse下的Maven，使用Maven，可以帮助包的管理，同时也省去很多网上下载寻找依赖包的时间。eclipse下Maven环境的搭建在此不赘述。

###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在eclipse中New Maven Project，项目名称为Demo，在生成的pom.xml中添加如下依赖
![Mou icon](https://raw.githubusercontent.com/tzccg0/lab2/master/1.png)

###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;保存后，Maven Project将会自动从网上的Maven仓库下载相关包，可在Maven Dependencies中查看：
![Mou icon](https://raw.githubusercontent.com/tzccg0/lab2/master/2.png)

###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后，在src/main/java下新建一个包com.resource，在resource下新建一个类HelloWorld，内容为
![Mou icon](https://raw.githubusercontent.com/tzccg0/lab2/master/9.png)

###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之后，在src/main/下新建文件夹webapp，在webapp下新建META-INF，WEB-INF，在WEB-INF下新建web.xml，内容为：
![Mou icon](https://raw.githubusercontent.com/tzccg0/lab2/master/3.png)



###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;web.xml指定了servlet的类型为jersey servlet，指定了资源包resource

###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后右键项目，选择run jetty（jetty环境安装不赘述），即可运行
![Mou icon](https://raw.githubusercontent.com/tzccg0/lab2/master/8.png)
![Mou icon](https://raw.githubusercontent.com/tzccg0/lab2/master/10.png)

###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在浏览器中输入http://localhost:8080/Demo/helloworld，出现
![Mou icon](https://raw.githubusercontent.com/tzccg0/lab2/master/4.png)

###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REST架构基本环境搭建完毕

##添加spring框架支持

###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;spring是J2EE应用程序框架，是轻量级的IoC和AOP的容器框架，主要是针对javaBean的生命周期进行管理的轻量级容器，可以单独使用，也可以和Struts框架，ibatis框架等组合使用。在这个lab里，尝试与jersey框架组合使用。

###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先，在pom.xml中添加所需的依赖包
![Mou icon](https://raw.githubusercontent.com/tzccg0/lab2/master/5.png)
![Mou icon](https://raw.githubusercontent.com/tzccg0/lab2/master/13.png)


###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后，在web.xml中添加spring支持
![Mou icon](https://raw.githubusercontent.com/tzccg0/lab2/master/7.png)


###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再在web.xml同目录下创建application-context.xml文件，内容为
![Mou icon](https://raw.githubusercontent.com/tzccg0/lab2/master/6.png)

###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再新建包com.service，在包中新建一个service为HelloWorldService，内容为
![Mou icon](https://raw.githubusercontent.com/tzccg0/lab2/master/14.png)

###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再修改包com.resource中HelloWorldResource中的内容，使用注解@Autowired，注入服务，由spring框架负责管理HelloWorldService
![Mou icon](https://raw.githubusercontent.com/tzccg0/lab2/master/11.png)

###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;运行程序，在浏览器中输入http://localhost:8080/Demo/helloworld，出现
![Mou icon](https://raw.githubusercontent.com/tzccg0/lab2/master/12.png)

###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;spring框架支持添加成功

##添加mybatis框架支持

###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyBatis 本是apache的一个开源项目iBatis, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。iBATIS一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。iBATIS提供的持久层框架包括SQL Maps和Data Access Objects（DAO）。在lab中，使用spring对mybatis事务进行管理。

###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在本地数据库中建一个表user，拥有uid，username，password，description四个属性，其中uid为primary key，自动递增。

###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在pom.xml中添加包依赖。
![Mou icon](https://raw.githubusercontent.com/tzccg0/lab2/master/15.png)

###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再添加插件generator，并在src/main/resources/mybatisGenerator/下新建文件generatorConfig.xml，内容为
![Mou icon](https://raw.githubusercontent.com/tzccg0/lab2/master/16.png)
![Mou icon](https://raw.githubusercontent.com/tzccg0/lab2/master/17.png)

###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用Maven Build运行插件，通过generatorConfig.xml，反向生成Dao，Model及Mapper

###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;生成成功
![Mou icon](https://raw.githubusercontent.com/tzccg0/lab2/master/23.png)
###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Model代码
![Mou icon](https://raw.githubusercontent.com/tzccg0/lab2/master/25.png)

###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Mapper代码
![Mou icon](https://raw.githubusercontent.com/tzccg0/lab2/master/18.png)

###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Mybatis的所有操作都是基于一个SqlSession的，而SqlSession是由SqlSessionFactory来产生的，SqlSessionFactory又是由SqlSessionFactoryBuilder来生成的。但是Mybatis-Spring是基于SqlSessionFactoryBean的。在使用Mybatis-Spring的时候，我们也需要SqlSession，而且这个SqlSession是内嵌在程序中的，一般不需要我们直接访问。SqlSession也是由SqlSessionFactory来产生的，但是Mybatis-Spring给我们封装了一个SqlSessionFactoryBean，在这个bean里面还是通过SqlSessionFactoryBuilder来建立对应的SqlSessionFactory，进而获取到对应的SqlSession。通过SqlSessionFactoryBean我们可以通过对其指定一些属性来提供Mybatis的一些配置信息。所以接下来我们需要在Spring的配置文件中定义一个SqlSessionFactoryBean。
![Mou icon](https://raw.githubusercontent.com/tzccg0/lab2/master/19.png)
![Mou icon](https://raw.githubusercontent.com/tzccg0/lab2/master/24.png)
![Mou icon](https://raw.githubusercontent.com/tzccg0/lab2/master/20.png)

###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再在com.resource中创建UserResource，如下
![Mou icon](https://raw.githubusercontent.com/tzccg0/lab2/master/21.png)

###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在com.service中创建UserService，如下
![Mou icon](https://raw.githubusercontent.com/tzccg0/lab2/master/22.png)

###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之后，就可以通过GET，POST，PUT，DELETE来对user进行增删查改
##Json支持
###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面写的REST后台已经支持前后端简单类型数据的传输，但如果要传输json数据，还需要添加一些包的依赖和一些简单的处理。

###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先新建一个类ApplicationAPI，继承自ResourceConfig，并在其中注册JacksonJsonProvider.class
![Mou icon](https://raw.githubusercontent.com/tzccg0/lab2/master/27.png)

###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后在web.xml中添加指定ApplicationAPI为javax.ws.rs.Application

![Mou icon](https://raw.githubusercontent.com/tzccg0/lab2/master/26.png)
###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这样，可以传输json类型数据，并添加了spring，mybatis支持的REST架构服务器就搭建完毕了

#####13302010033 陈晨光
#####[项目代码](https://github.com/tzccg0/lab2/tree/master/Demo)
#####https://github.com/tzccg0/lab2/tree/master/Demo
